## Assignment: Project 03
## Author: Nicolas Sims (sableye.nico@gmail.com)
## Version: 10.20.2015.99
## Create the logic for the dice game Pig, in which a player can compete with the computer.

use 5.14.1;
use warnings;

my ($i, $dicePool, $playerScore, $compScore, $totalPlayerScore, $totalCompScore, $playerTurn, @diceRolls);
use constant FAILING_ROLL => 1;
use constant WINNING_SCORE => 100;
use constant PLAYER_TURN => 1;

sub main {
     setIncrementer();
     setDicePool();
     setCompScore();
     setPlayerScore();
     setPlayerTurn();
     setTotalPlayerScore();
     setTotalCompScore();
     while ($totalPlayerScore <= WINNING_SCORE && $totalCompScore <= WINNING_SCORE) {
          if ($playerTurn == PLAYER_TURN) {
               setDiceRolls();
               setIncrementer();
               setPlayerScore();
               setPlayerTurn();
               if ($playerTurn != PLAYER_TURN && $diceRolls[$i] != FAILING_ROLL && $diceRolls[$i + 1] != FAILING_ROLL) {
                    setTotalPlayerScore();
                    setPlayerScore();
               }
          } else {
               setDiceRolls();
               setIncrementer();
               setCompScore();
               setPlayerTurn();
               if ($playerTurn == PLAYER_TURN && $diceRolls[$i] != FAILING_ROLL && $diceRolls[$i + 1] != FAILING_ROLL) {
                    setTotalCompScore();
                    setCompScore();
               }
          }
     }
     printVictoryMessage();
}

main();

sub setIncrementer {
     $i = 0;
}

sub setDicePool {
     use constant SIDES_DICE => 6;
     $dicePool = SIDES_DICE;
}

sub setCompScore {
     if (!defined $compScore || $playerTurn != 0) {
          $compScore = 0;
     } else {
          if ($diceRolls[$i] == FAILING_ROLL && $diceRolls[$i + 1] == FAILING_ROLL) {
               print "COMP malfunctioned. Score reset.\n";
               $compScore = 0;
          } elsif ($diceRolls[$i] == FAILING_ROLL || $diceRolls[$i + 1] == FAILING_ROLL) {
               print "COMP whiffed. Score unchanged.\n";
               $compScore = 0;
          } else {
               $compScore = $compScore + $diceRolls[$i] + $diceRolls[$i + 1];
          }
     }
}

sub setPlayerScore {
     if (!defined $playerScore || $playerTurn == 0) {
          $playerScore = 0;
     } else {
          if ($diceRolls[$i] == FAILING_ROLL && $diceRolls[$i + 1] == FAILING_ROLL) {
               print "Bad roll. Score reset.\n";
               $playerScore = 0;
          } elsif ($diceRolls[$i] == FAILING_ROLL || $diceRolls[$i + 1] == FAILING_ROLL) {
               print "Poor roll. Rolls uncounted.\n";
               $playerScore = 0;
          } else {
               $playerScore = $playerScore + $diceRolls[$i] + $diceRolls[$i + 1];
          }
     }       
}

sub setPlayerTurn {
     if (!defined $playerTurn || $playerTurn == PLAYER_TURN) {
          if (!defined $playerTurn) {
               $playerTurn = PLAYER_TURN;
          } elsif ($diceRolls[$i] == FAILING_ROLL || $diceRolls[$i + 1] == FAILING_ROLL) {
               $playerTurn = 0;
          } else {
               print "Your total score for this round is $playerScore.\nYour total score is $totalPlayerScore.\nWould you like to continue your turn? (No = 0, Yes = 1)\n";
               chomp ($playerTurn = <STDIN>);
               while ($playerTurn !~ /[0-9]/ || $playerTurn != 0 && $playerTurn != PLAYER_TURN) {
                    print "Invalid entry. Please enter either a 0 or 1.\nWould you like to continue your turn? (No = 0, Yes = 1)\n";
                    chomp ($playerTurn = <STDIN>);
               }
          }
     } else {
          use constant SIDES_COIN => 2;
          my $endRNG = SIDES_COIN;
          my $endTurnTotal = $totalCompScore + $compScore;
          if ($diceRolls[$i] == FAILING_ROLL || $diceRolls[$i + 1] == FAILING_ROLL || $endTurnTotal >= WINNING_SCORE) {
               $playerTurn = PLAYER_TURN;
          } else {
               print "COMP's total score for this round is $compScore.\nCOMP's total score is $totalCompScore.\n";
               $playerTurn = int(rand($endRNG));
               if ($playerTurn != PLAYER_TURN) {
                    print "COMP continues. Player standby.\n";
               } else {
                    print "COMP yields. Player go.\n";
               }
          }
     }
}

sub setTotalPlayerScore {
     if (!defined $totalPlayerScore || $diceRolls[$i] == FAILING_ROLL && $diceRolls[$i + 1] == FAILING_ROLL) {
          $totalPlayerScore = 0;
     } else {
          $totalPlayerScore = $totalPlayerScore + $playerScore;
     }
}

sub setTotalCompScore {
     if (!defined $totalCompScore || $diceRolls[$i] == FAILING_ROLL && $diceRolls[$i + 1] == FAILING_ROLL) {
          $totalCompScore = 0;
     } else {
          $totalCompScore = $totalCompScore + $compScore;
     }
}

sub setDiceRolls {
     for ($i = 0; $i < 2; $i++) {
          $diceRolls[$i] = int(rand($dicePool)+1);
          print "Rolled a $diceRolls[$i].\n";
     }
}

sub printVictoryMessage {
     if ($totalPlayerScore <= WINNING_SCORE) {
          print "COMP won! You failed!\n";
          sleep 3;
     } else {
          print "You won! COMP failed!\n";
          sleep 3;
     }
}
