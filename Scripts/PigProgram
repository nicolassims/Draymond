## Assignment: Project 03
## Author: Nicolas Sims (sableye.nico@gmail.com)
## Version: 10.20.2015.01
## Create the logic for the dice game Pig, in which a player can compete with the computer.

use 5.14.1;
use warnings;

my ($diceRoll, $gameOver, $utterFailure, $minorFailure, $continueTurn, $roundPoolTotal, $totalPlayerPool, $computerPoolTotal, $numDiceRolled, @playerDiceTotal, @computerDiceTotal);
use constant FAILING_ROLL => 1;
use constant CONTINUE_TURN => 1;

sub main {
     setUtterFailure();
     setMinorFailure();
     setBeginningContinueTurn();
     while (!defined $gameOver) {
          setDiceRoll();
          setNumDiceRolled();
          setPlayerDiceTotal();
          setRoundPoolTotal();
          setTotalPlayerPool();
          setContinueTurn();
     }
}

main();

sub setBeginningContinueTurn {
     if (!defined $continueTurn) {
          $continueTurn = CONTINUE_TURN;
     }
}

sub setDiceRoll {
     my $dicePool = 6;
     $diceRoll = int(rand($dicePool)+1);
}

sub setNumDiceRolled {
     use constant STARTING_ROLLS => 2;
     if (!defined $numDiceRolled) {
          $numDiceRolled = STARTING_ROLLS;
     } else {
          $numDiceRolled = @playerDiceTotal;
     }
}

sub setPlayerDiceTotal {
     if ($diceRoll != FAILING_ROLL) {
          for (my $i = 0; $i < $numDiceRolled; $i++) {
               $playerDiceTotal[$i] = $diceRoll;
               print "Rolled a $diceRoll. \n";
               setDiceRoll();
          }
     } else {
          setMinorFailure();
          setDiceRoll();
          if ($diceRoll = FAILING_ROLL) {
               print "Rolled two ones. Failure!\n";
               sleep 3;
               setUtterFailure();
          }
     }
}

sub setUtterFailure {
     if (!defined $utterFailure) {
          $utterFailure = 1;
     } else {
          $utterFailure = 0;
     }
}

sub setMinorFailure {
     if (!defined $minorFailure) {
          $minorFailure = 1;
     } else {
          $minorFailure = 0;
     }
}

sub setRoundPoolTotal {
     if (!defined $roundPoolTotal || $minorFailure == 0 || $utterFailure == 0) {
          $roundPoolTotal = 0;
          print "Lost all points from this round.\n"
     } else {
          for (my $i = 0; $i < $numDiceRolled; $i++) {
               $roundPoolTotal = $roundPoolTotal + $playerDiceTotal[$i];
          }
     }
}

sub setTotalPlayerPool {
     if (!defined $totalPlayerPool || $utterFailure == 0) {
          $totalPlayerPool = 0;
          print "Lost all points, total, in fact.\n"
     }
     if ($continueTurn == 0) {
          $totalPlayerPool = $totalPlayerPool + $roundPoolTotal;
     }
}

sub setContinueTurn {
     if ($minorFailure == 0 || $utterFailure == 0) {
          print "Your total score for this round is $roundPoolTotal.\nYour total score is $totalPlayerPool.\nWould you like to continue your turn? (No = 0, Yes = 1)\n";
          chomp ($continueTurn = <STDIN>);
          while ($continueTurn !~ /[0-9]/ || $continueTurn != 0 && $continueTurn != CONTINUE_TURN) {
               print "Invalid entry. Please enter either a 0 or 1. (No = 0, Yes = 1)\n";
               chomp ($continueTurn = <STDIN>);
               if ($continueTurn == CONTINUE_TURN) {
                     main();
               }    
          }
     }
}
